generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Note {
  id        Int      @id @default(autoincrement())
  noteId    Int
  guildId   String
  userId    String
  staffId   String
  staffName String
  note      String
  createdAt DateTime @default(now())

  @@unique([noteId, userId, guildId])
}

model Giveaway {
  id           Int      @id @default(autoincrement())
  messageId    String   @unique
  channelId    String
  hosterId     String
  guildId      String
  prize        String
  description  String?  @db.Text
  winnerAmount Int
  participants String[] @default([])
  expired      Boolean  @default(false)
  expiresAt    DateTime
}

model Modlog {
  id         Int       @id @default(autoincrement())
  caseId     Int?
  staffId    String
  staffName  String
  memberId   String
  guildId    String
  memberName String
  reason     String?   @default("No reason")
  type       String
  length     String?
  createdAt  DateTime  @default(now())
  warn       Warn[]
  modnick    Modnick[]
  mute       Mute[]
  ban        Ban[]

  @@unique([guildId, caseId])
  @@index([staffId, memberId, guildId])
}

model Ban {
  id        Int       @id @default(autoincrement())
  memberId  String
  modlog    Modlog    @relation(fields: [modlogId], references: [id])
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  modlogId  Int

  @@index([memberId])
}

model Mute {
  id           Int       @id @default(autoincrement())
  memberId     String
  modlog       Modlog    @relation(fields: [modlogId], references: [id])
  createdAt    DateTime  @default(now())
  expiresAt    DateTime?
  modlogId     Int
  removedRoles String[]

  @@index([memberId])
}

model Warn {
  id        Int      @id @default(autoincrement())
  memberId  String
  warnUid   String   @unique
  modlog    Modlog   @relation(fields: [modlogId], references: [id])
  modlogId  Int
  createdAt DateTime @default(now())

  @@index([memberId, warnUid])
}

model Modnick {
  id                Int      @id @default(autoincrement())
  memberId          String   @unique
  guildId           String
  originalNickname  String
  moderatedNickname String
  frozen            Boolean  @default(false)
  modlog            Modlog   @relation(fields: [modlogId], references: [id])
  modlogId          Int
  createdAt         DateTime @default(now())

  @@unique([memberId, guildId])
  @@index([memberId, guildId])
}

model Afk {
  id       Int    @id @default(autoincrement())
  memberId String
  guildId  String
  afkNick  String

  afkPingMessages AfkPingMessage[]
  afkMessage      String

  createdAt DateTime @default(now())

  @@unique([memberId, guildId])
  @@index([memberId, guildId])
}

// model GuildAutomod {
//   guildId        String                 @id
//   bannedWords    AutomodBannedWords?    @relation(fields: [automodBannedWordsId], references: [id])
//   capitalization AutomodCapitalization? @relation(fields: [automodCapitalizationId], references: [id])
//   inviteLinks    AutomodInviteLinks?    @relation(fields: [automodInviteLinksId], references: [id])
//   linkCooldown   AutomodLinkCooldown?   @relation(fields: [automodLinkCooldownId], references: [id])
//   links          AutomodLinks?          @relation(fields: [automodLinksId], references: [id])
//   massMention    AutomodMassMention?    @relation(fields: [automodMassMentionId], references: [id])
//   newLines       AutomodNewlines?       @relation(fields: [automodNewlinesId], references: [id])
//   spam           AutomodSpam?           @relation(fields: [automodSpamId], references: [id])
//   stickers       AutomodStickers?       @relation(fields: [automodStickersId], references: [id])

//   guild                   Guild[]
//   automodBannedWordsId    Int
//   automodCapitalizationId Int
//   automodInviteLinksId    Int
//   automodLinkCooldownId   Int
//   automodLinksId          Int
//   automodMassMentionId    Int
//   automodNewlinesId       Int
//   automodSpamId           Int
//   automodStickersId       Int
// }

model Guild {
  guildId       String  @id @unique
  roleTrainee   String?
  roleStaff     String?
  roleModerator String?
  roleAdmin     String?
  roleMuted     String?

  appealLink String?

  bannedWords    AutomodBannedWords?    @relation(fields: [automodBannedWordsGuildId], references: [guildId])
  capitalization AutomodCapitalization? @relation(fields: [automodCapitalizationGuildId], references: [guildId])
  inviteLinks    AutomodInviteLinks?    @relation(fields: [automodInviteLinksGuildId], references: [guildId])
  linkCooldown   AutomodLinkCooldown?   @relation(fields: [automodLinkCooldownGuildId], references: [guildId])
  links          AutomodLinks?          @relation(fields: [automodLinksGuildId], references: [guildId])
  massMention    AutomodMassMention?    @relation(fields: [automodMassMentionGuildId], references: [guildId])
  newLines       AutomodNewlines?       @relation(fields: [automodNewlinesGuildId], references: [guildId])
  spam           AutomodSpam?           @relation(fields: [automodSpamGuildId], references: [guildId])
  stickers       AutomodStickers?       @relation(fields: [automodStickersGuildId], references: [guildId])

  channelModlog     String?
  channelSuggestion String?

  suggestionCreateThread Boolean?

  restrictionNodes RestrictionNode[]

  useCachedStats Boolean @default(true)

  lookback Int     @default(7)
  prefix   String  @default(">")
  premium  Boolean @default(false)

  automodBannedWordsGuildId    String?
  automodCapitalizationGuildId String?
  automodInviteLinksGuildId    String?
  automodLinkCooldownGuildId   String?
  automodLinksGuildId          String?
  automodMassMentionGuildId    String?
  automodNewlinesGuildId       String?
  automodSpamGuildId           String?
  automodStickersGuildId       String?

  @@index([guildId])
}

model MemberActivity {
  id        Int               @id @default(autoincrement())
  guildId   String
  userId    String
  action    MemberAcivityType
  createdAt DateTime          @default(now())
}

model Message {
  id            Int     @id @default(autoincrement())
  messageId     String
  memberId      String
  channelId     String
  guildId       String
  length        Int
  minuteMessage Boolean @default(false)

  createdAt DateTime @default(now())

  @@index([memberId, guildId, minuteMessage, createdAt]) // stats user
  @@index([memberId, guildId, createdAt])
  @@index([memberId, guildId])
  @@index([memberId, guildId, minuteMessage])
  @@index([channelId, guildId, minuteMessage, createdAt]) // stats channel
  @@index([channelId, guildId, createdAt])
  @@index([channelId, guildId])
  @@index([channelId, guildId, minuteMessage])
  @@index([guildId, createdAt]) // stats server
  @@index([guildId])
}

model Command {
  id       Int      @id @default(autoincrement())
  name     String
  authorId String
  usedAt   DateTime @default(now())
}

model CommandRestriction {
  id                  String   @unique // guildId-commandName
  disabled            Boolean  @default(false)
  whiteListedMembers  String[] @default([])
  whiteListedRoles    String[] @default([])
  whiteListedChannels String[] @default([])
  blackListedMembers  String[] @default([])
  blackListedRoles    String[] @default([])
  blackListedChannels String[] @default([])
}

model AfkPingMessage {
  id         Int    @id @default(autoincrement())
  memberId   String
  memberName String
  content    String
  messageUrl String
  afk        Afk?   @relation(fields: [afkId], references: [id])
  afkId      Int?

  @@index([memberId])
}

model Suggestion {
  id                     Int     @id @default(autoincrement())
  suggestionId           Int
  guildId                String
  text                   String
  memberName             String
  memberId               String
  memberDisplayAvatarURL String
  status                 String // pending | accepted | declined | considered | implemented
  responderName          String?
  responderId            String?

  @@unique([guildId, suggestionId])
  @@index([suggestionId, guildId])
}

model RestrictionNode {
  id           String   @id @default(cuid())
  targetId     String
  allow        String[] @default([])
  deny         String[] @default([])
  guild        Guild?   @relation(fields: [guildGuildId], references: [guildId])
  guildGuildId String?
}

model AutomodBannedWords {
  guildId String  @id @unique
  enabled Boolean

  wildcard String[] @default([])
  exact    String[] @default([])

  actions          PrismaModerationType[] @default([]) // List of ModerationAction
  automuteAfter    Int                    @default(3) // Number of violations after automuting
  automuteDuration Int                    @default(300000) // Number of milliseconds to mute for

  ignoredRoles     String[] @default([])
  ignoredChannels  String[] @default([])
  affectedRoles    String[] @default([])
  affectedChannels String[] @default([])

  logChannel String?
  response   String?

  Guild Guild[]
}

model AutomodCapitalization {
  guildId String  @id @unique
  enabled Boolean

  actions          PrismaModerationType[] @default([]) // List of ModerationAction
  automuteAfter    Int                    @default(3) // Number of violations after automuting
  automuteDuration Int                    @default(300000) // Number of milliseconds to mute for

  percentage Int? // Between 40 to 100

  ignoredRoles     String[] @default([])
  ignoredChannels  String[] @default([])
  affectedRoles    String[] @default([])
  affectedChannels String[] @default([])

  logChannel String?
  response   String?

  Guild Guild[]
}

model AutomodInviteLinks {
  guildId String  @id @unique
  enabled Boolean

  actions          PrismaModerationType[] @default([]) // List of ModerationAction
  automuteAfter    Int                    @default(3) // Number of violations after automuting
  automuteDuration Int                    @default(300000) // Number of milliseconds to mute for

  allowedInvites String[] @default([])

  ignoredRoles     String[] @default([])
  ignoredChannels  String[] @default([])
  affectedRoles    String[] @default([])
  affectedChannels String[] @default([])

  logChannel String?
  response   String?

  Guild Guild[]
}

model AutomodStickers {
  guildId String  @id @unique
  enabled Boolean

  actions          PrismaModerationType[] @default([]) // List of ModerationAction
  automuteAfter    Int                    @default(3) // Number of violations after automuting
  automuteDuration Int                    @default(300000) // Number of milliseconds to mute for

  ignoredRoles     String[] @default([])
  ignoredChannels  String[] @default([])
  affectedRoles    String[] @default([])
  affectedChannels String[] @default([])

  logChannel String?
  response   String?

  Guild Guild[]
}

model AutomodLinkCooldown {
  guildId String  @id @unique
  enabled Boolean

  actions          PrismaModerationType[] @default([]) // List of ModerationAction
  automuteAfter    Int                    @default(3) // Number of violations after automuting
  automuteDuration Int                    @default(300000) // Number of milliseconds to mute for

  cooldown Int? // Number of seconds between each link sent

  ignoredRoles     String[] @default([])
  ignoredChannels  String[] @default([])
  affectedRoles    String[] @default([])
  affectedChannels String[] @default([])

  logChannel String?
  response   String?

  Guild Guild[]
}

model AutomodLinks {
  guildId String  @id @unique
  enabled Boolean

  actions          PrismaModerationType[] @default([]) // List of ModerationAction
  automuteAfter    Int                    @default(3) // Number of violations after automuting
  automuteDuration Int                    @default(300000) // Number of milliseconds to mute for

  allowedLinks String[] @default([])
  deniedLink   String[] @default([])

  ignoredRoles     String[] @default([])
  ignoredChannels  String[] @default([])
  affectedRoles    String[] @default([])
  affectedChannels String[] @default([])

  logChannel String?
  response   String?

  Guild Guild[]
}

model AutomodMassMention {
  guildId String  @id @unique
  enabled Boolean

  actions          PrismaModerationType[] @default([]) // List of ModerationAction
  automuteAfter    Int                    @default(3) // Number of violations after automuting
  automuteDuration Int                    @default(300000) // Number of milliseconds to mute for

  count Int?

  ignoredRoles     String[] @default([])
  ignoredChannels  String[] @default([])
  affectedRoles    String[] @default([])
  affectedChannels String[] @default([])

  logChannel String?
  response   String?

  Guild Guild[]
}

model AutomodNewlines {
  guildId String  @id @unique
  enabled Boolean

  actions          PrismaModerationType[] @default([]) // List of ModerationAction
  automuteAfter    Int                    @default(3) // Number of violations after automuting
  automuteDuration Int                    @default(300000) // Number of milliseconds to mute for

  rows Int?

  ignoredRoles     String[] @default([])
  ignoredChannels  String[] @default([])
  affectedRoles    String[] @default([])
  affectedChannels String[] @default([])

  logChannel String?
  response   String?

  Guild Guild[]
}

model AutomodSpam {
  guildId String  @id @unique
  enabled Boolean

  actions          PrismaModerationType[] @default([]) // List of ModerationAction
  automuteAfter    Int                    @default(3) // Number of violations after automuting
  automuteDuration Int                    @default(300000) // Number of milliseconds to mute for

  messagesEveryFiveSeconds Int?

  ignoredRoles     String[] @default([])
  ignoredChannels  String[] @default([])
  affectedRoles    String[] @default([])
  affectedChannels String[] @default([])

  logChannel String?
  response   String?

  Guild Guild[]
}

enum MemberAcivityType {
  JOIN
  LEAVE
}

enum PrismaModerationType {
  warn
  modnick
  mute
  automute
  ban
  kick
  unmute
  unban
  unwarn
  afkreset
  afkclear
}
