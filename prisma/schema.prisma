generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Note {
  id        Int      @id @default(autoincrement())
  noteId    Int
  guildId   String
  userId    String
  staffId   String
  staffName String
  note      String
  createdAt DateTime @default(now())

  @@unique([noteId, userId, guildId])
}

model Giveaway {
  id           Int      @id @default(autoincrement())
  messageId    String   @unique
  channelId    String
  hosterId     String
  guildId      String
  prize        String
  description  String?  @db.Text
  winnerAmount Int
  participants String[] @default([])
  expired      Boolean  @default(false)
  expiresAt    DateTime
}

model Modlog {
  id         Int       @id @default(autoincrement())
  caseId     Int?
  staffId    String
  staffName  String
  memberId   String
  guildId    String
  memberName String
  reason     String?   @default("No reason")
  type       String
  length     String?
  createdAt  DateTime  @default(now())
  warn       Warn[]
  modnick    Modnick[]
  mute       Mute[]
  ban        Ban[]

  @@unique([guildId, caseId])
  @@index([staffId, memberId, guildId])
}

model Ban {
  id        Int       @id @default(autoincrement())
  memberId  String
  modlog    Modlog    @relation(fields: [modlogId], references: [id])
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  modlogId  Int

  @@index([memberId])
}

model Mute {
  id           Int       @id @default(autoincrement())
  memberId     String
  modlog       Modlog    @relation(fields: [modlogId], references: [id])
  createdAt    DateTime  @default(now())
  expiresAt    DateTime?
  modlogId     Int
  removedRoles String[]

  @@index([memberId])
}

model Warn {
  id        Int      @id @default(autoincrement())
  memberId  String
  warnUid   String   @unique
  modlog    Modlog   @relation(fields: [modlogId], references: [id])
  modlogId  Int
  createdAt DateTime @default(now())

  @@index([memberId, warnUid])
}

model Modnick {
  id                Int      @id @default(autoincrement())
  memberId          String   @unique
  guildId           String
  originalNickname  String
  moderatedNickname String
  frozen            Boolean  @default(false)
  modlog            Modlog   @relation(fields: [modlogId], references: [id])
  modlogId          Int
  createdAt         DateTime @default(now())

  @@unique([memberId, guildId])
  @@index([memberId, guildId])
}

model Afk {
  id       Int    @id @default(autoincrement())
  memberId String
  guildId  String
  afkNick  String

  afkPingMessages AfkPingMessage[]
  afkMessage      String

  createdAt DateTime @default(now())

  @@unique([memberId, guildId])
  @@index([memberId, guildId])
}

model Guild {
  guildId       String  @id @unique
  roleTrainee   String?
  roleStaff     String?
  roleModerator String?
  roleAdmin     String?
  roleMuted     String?

  channelModlog     String?
  channelSuggestion String?

  suggestionCreateThread Boolean?

  restrictionNodes RestrictionNode[]

  lookback Int     @default(7)
  prefix   String  @default(">")
  premium  Boolean @default(false)

  @@index([guildId])
}

model Message {
  id            Int     @id @default(autoincrement())
  messageId     String
  memberId      String
  channelId     String
  guildId       String
  length        Int
  minuteMessage Boolean @default(false)

  createdAt DateTime @default(now())

  @@index([memberId, guildId, channelId, minuteMessage])
  @@index([createdAt])
  @@index([createdAt, guildId])
  @@index([minuteMessage])
  @@index([minuteMessage, createdAt])
}

model Command {
  id       Int      @id @default(autoincrement())
  name     String
  authorId String
  usedAt   DateTime @default(now())
}

model CommandRestriction {
  id                  String   @unique // guildId-commandName
  disabled            Boolean  @default(false)
  whiteListedMembers  String[] @default([])
  whiteListedRoles    String[] @default([])
  whiteListedChannels String[] @default([])
  blackListedMembers  String[] @default([])
  blackListedRoles    String[] @default([])
  blackListedChannels String[] @default([])
}

model AfkPingMessage {
  id         Int    @id @default(autoincrement())
  memberId   String
  memberName String
  content    String
  messageUrl String
  afk        Afk?   @relation(fields: [afkId], references: [id])
  afkId      Int?

  @@index([memberId])
}

model Suggestion {
  id                     Int     @id @default(autoincrement())
  suggestionId           Int
  guildId                String
  text                   String
  memberName             String
  memberId               String
  memberDisplayAvatarURL String
  status                 String // pending | accepted | declined | considered | implemented
  responderName          String?
  responderId            String?

  @@unique([guildId, suggestionId])
  @@index([suggestionId, guildId])
}

model RestrictionNode {
  id           String   @id @default(cuid())
  targetId     String
  allow        String[] @default([])
  deny         String[] @default([])
  guild        Guild?   @relation(fields: [guildGuildId], references: [guildId])
  guildGuildId String?
}
